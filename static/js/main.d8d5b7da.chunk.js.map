{"version":3,"sources":["components/weather/icon/cloud.svg","components/weather/icon/day-and-night.svg","components/weather/icon/umbrella.svg","components/weather/icon/snow.svg","components/weather/icon/flash.svg","components/context.js","components/weather/WeatherCard.js","components/weather/Wather.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherContext","createContext","WeatherProvider","props","useState","temp","city","weather","description","setWeather","Provider","value","children","WeatherCard","useContext","className","type","placeholder","onChange","e","target","toLowerCase","onClick","flag","citylist","map","item","name","alert","getWeatherByCity","alt","src","Clear","Rain","Clouds","Snow","Extream","weatherIcon","Math","round","Weather","useEffect","getWeatherByGeo","error","console","log","a","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","process","GeoURL","fetch","apiCall","status","json","response","main","CurrentURL","href","title","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8d5b7da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.e8470e96.svg\";","module.exports = __webpack_public_path__ + \"static/media/day-and-night.086b33af.svg\";","module.exports = __webpack_public_path__ + \"static/media/umbrella.d1de10b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.298328c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/flash.8a31af56.svg\";","import React, { useState, createContext } from 'react';\n\nexport const WeatherContext = createContext(null);\nexport const WeatherProvider = (props) => {\n  const [weather, setWeather] = useState({\n    temp: null,\n    city: null,\n    weather: null,\n    description: null,\n  });\n  //   const { temp, setTemp } = useState('ff');\n  //   const { city, setCity } = useState('vancouver');\n  //   const { weather, setWeather } = useState('');\n  //   const { description, setDescription } = useState('');\n  return (\n    <WeatherContext.Provider\n      value={\n        [weather, setWeather]\n        // ({ temp, setTemp },\n        // { city, setCity },\n        // { weather, setWeather },\n        // { description, setDescription })\n      }>\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherContext;\n","import React, { useContext } from 'react';\nimport citylist from './citylist.json';\nimport WeatherContext from '../context';\n\n//icon\nimport Clear from './icon/day-and-night.svg';\nimport Clouds from './icon/cloud.svg';\nimport Rain from './icon/umbrella.svg';\nimport Snow from './icon/snow.svg';\nimport Extream from './icon/flash.svg';\n\nconst WeatherCard = (props) => {\n  //here, I tried to use it, but it doesn't work.\n  // const { city, setCity } = useState('vancouver');\n  const [weather, setWeather] = useContext(WeatherContext);\n  // const weatherData = useContext(AppContext);\n\n  const handleChange = (e) => {\n    setWeather({\n      ...weather,\n      city: e.target.value.toLowerCase(),\n    });\n  };\n\n  const handleClick = () => {\n    //check if the input city name is vallid or not\n    let flag = 0;\n    citylist.map((item) => {\n      if (item.name.toLowerCase() === weather.city) {\n        flag = 1;\n      }\n    });\n    if (flag === 0) {\n      alert(\n        \"I'm sorry. I couldn't find the ciry name in our dictionary. Please try different name.\"\n      );\n    } else {\n      props.getWeatherByCity(weather.city);\n    }\n  };\n\n  const weatherIcon = (weather) => {\n    switch (weather) {\n      case 'Clear':\n        return Clear;\n      case 'Rain':\n        return Rain;\n      case 'Clouds':\n        return Clouds;\n      case 'Snow':\n        return Snow;\n      case 'Extreme':\n        return Extream;\n\n      default:\n        return Clouds;\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <>\n        <div className=\"app-title\">\n          <p>Weather App</p>\n        </div>\n        <div className=\"form\">\n          <input\n            type=\"text\"\n            placeholder=\"Vancouver\"\n            onChange={handleChange}\n            value={weather.city}\n          />\n          <button onClick={handleClick}>GET WEATHER</button>\n        </div>\n        <div className=\"weather-container\">\n          <div className=\"description\">\n            <p>{weather.city}</p>\n          </div>\n          <div className=\"weather-icon\">\n            <img alt=\"weather icon\" src={weatherIcon(props.weather)} />\n          </div>\n\n          <div className=\"temperature-value\">\n            <p>\n              {props.temp ? Math.round(props.temp - 273.15) : null}Â°\n              <span>C</span>\n            </p>\n          </div>\n          <div className=\"description\">\n            <p>{props.description}</p>\n          </div>\n        </div>\n      </>\n    </div>\n  );\n};\nexport default WeatherCard;\n","import React, { useState, useEffect, useContext } from 'react';\nimport WeatherCard from './WeatherCard';\nimport WeatherContext from '../context';\n\n//here is the component to get weather info\n// so let's see what's going on\nconst Weather = () => {\n  const [weather, setWeather] = useContext(WeatherContext);\n\n  useEffect(() => {\n    getWeatherByGeo();\n  }, []);\n\n  //for geolocation error\n  const error = () => {\n    console.log('error');\n    getWeatherByCity('Vancouver');\n  };\n  //get the current weather info by geolocation\n  const getWeatherByGeo = async () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(async (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n\n        const API_KEY = process.env.REACT_APP_OWM_API;\n\n        const GeoURL = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n\n        const apiCall = await fetch(GeoURL);\n        if (apiCall.status !== 200) console.log('something wrong');\n\n        const response = await apiCall.json();\n\n        setWeather({\n          ...weather,\n          temp: response.main.temp,\n          city: response.name,\n          weather: response.weather[0].main,\n          description: response.weather[0].description,\n        });\n\n        console.log(weather.temp);\n      }, error);\n    } else {\n      console.log('search by default city');\n      getWeatherByCity('Vancouver');\n    }\n  };\n\n  const getWeatherByCity = async (city) => {\n    const API_KEY = process.env.REACT_APP_OWM_API;\n    const CurrentURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\n\n    const apiCall = await fetch(CurrentURL);\n    if (apiCall.status !== 200) console.log('something wrong');\n\n    const response = await apiCall.json();\n    setWeather({\n      ...weather,\n      temp: response.main.temp,\n      city: response.name,\n      weather: response.weather[0].main,\n      description: response.weather[0].description,\n    });\n  };\n\n  // render() {\n  return (\n    <div>\n      <WeatherCard\n        getWeatherByCity={getWeatherByCity}\n        temp={weather.temp}\n        city={weather.city}\n        weather={weather.weather}\n        description={weather.description}\n      />\n\n      <div className=\"copy-right\">\n        Icons made by{' '}\n        <a\n          href=\"https://www.flaticon.com/authors/smashicons\"\n          title=\"Smashicons\">\n          Smashicons\n        </a>{' '}\n        from{' '}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          {' '}\n          www.flaticon.com\n        </a>\n      </div>\n    </div>\n  );\n};\n// }\nexport default Weather;\n","import React, { Component } from 'react';\nimport { WeatherProvider } from './context';\n\nimport Weather from './weather/Wather';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherProvider>\n          <Weather />\n        </WeatherProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}