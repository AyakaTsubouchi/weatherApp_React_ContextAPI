{"version":3,"sources":["components/weather/icon/cloud.svg","components/weather/icon/day-and-night.svg","components/weather/icon/umbrella.svg","components/weather/icon/snow.svg","components/weather/icon/flash.svg","components/context.js","components/weather/WeatherCard.js","components/weather/Wather.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","WeatherCard","state","city","handleChange","e","setState","target","value","toLowerCase","console","log","handleClick","flag","citylist","map","item","name","alert","props","getWeatherByCity","weatherIcon","weather","Clear","Rain","Clouds","Snow","Extream","Consumer","weatherData","className","type","placeholder","onChange","onClick","src","temp","Math","round","description","Component","Weather","getWeatherByGeo","a","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","process","byGeo","fetch","apiCall","status","json","response","main","humidity","propCity","CurrentURL","this","Provider","href","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6c99832.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.e8470e96.svg\";","module.exports = __webpack_public_path__ + \"static/media/day-and-night.086b33af.svg\";","module.exports = __webpack_public_path__ + \"static/media/umbrella.d1de10b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.298328c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/flash.8a31af56.svg\";","import React from 'react';\n\nconst AppContext = React.createContext(null);\n\nexport default AppContext;\n","import React, { Component } from 'react';\nimport citylist from './citylist.json';\nimport AppContext from '../context';\n\n//icon\nimport Clear from './icon/day-and-night.svg';\nimport Clouds from './icon/cloud.svg';\nimport Rain from './icon/umbrella.svg';\nimport Snow from './icon/snow.svg';\nimport Extream from './icon/flash.svg';\n\nclass WeatherCard extends Component {\n  state = {\n    city: '',\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      city: e.target.value.toLowerCase(),\n    });\n    console.log(this.state.city);\n  };\n\n  handleClick = () => {\n    //check if the input city name is vallid or not\n    let flag = 0;\n    citylist.map((item) => {\n      if (item.name.toLowerCase() === this.state.city) {\n        flag = 1;\n      }\n    });\n    if (flag === 0) {\n      alert('try again');\n    } else {\n      alert(\"let's search\");\n      this.props.getWeatherByCity(this.state.city);\n    }\n  };\n  weatherIcon = (weather) => {\n    switch (weather) {\n      case 'Clear':\n        return Clear;\n      case 'Rain':\n        return Rain;\n      case 'Clouds':\n        return Clouds;\n      case 'Snow':\n        return Snow;\n      case 'Extreme':\n        return Extream;\n\n      default:\n        return Clouds;\n    }\n  };\n  render() {\n    return (\n      <AppContext.Consumer>\n        {(weatherData) => (\n          <div className=\"container\">\n            <div className=\"app-title\">\n              <p>Weather App</p>\n            </div>\n            <div className=\"form\">\n              <input\n                type=\"text\"\n                placeholder=\"Vancouver\"\n                onChange={this.handleChange}\n                value={this.state.city}\n              />\n              <button onClick={this.handleClick}>GET WEATHER</button>\n            </div>\n            <div className=\"weather-container\">\n              <div className=\"description\">\n                <p>{weatherData.city}</p>\n              </div>\n              <div className=\"weather-icon\">\n                <img src={this.weatherIcon(weatherData.weather)} />\n              </div>\n\n              <div className=\"temperature-value\">\n                <p>\n                  {weatherData.temp\n                    ? Math.round(weatherData.temp - 273.15)\n                    : null}\n                  Â°<span>C</span>\n                </p>\n              </div>\n              <div className=\"description\">\n                <p>{weatherData.description}</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n\nexport default WeatherCard;\n","import React, { Component } from 'react';\nimport WeatherCard from './WeatherCard';\nimport AppContext from '../context';\n\nclass Weather extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getWeatherByGeo();\n  }\n\n  getWeatherByGeo = async () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(async (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n\n        const API_KEY = process.env.REACT_APP_OWM_API;\n        //currtent weather\n        const CurrentURL = `https://api.openweathermap.org/data/2.5/weather?`;\n        const byGeo = `${CurrentURL}lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n\n        const apiCall = await fetch(byGeo);\n        if (apiCall.status !== 200) console.log('something wrong');\n\n        const response = await apiCall.json();\n\n        this.setState({\n          temp: response.main.temp,\n          city: response.name,\n          humidity: response.main.humidity,\n          weather: response.weather[0].main,\n          description: response.weather[0].description,\n        });\n        console.log(this.state);\n      });\n    } else {\n      console.log('search default city');\n      this.getWeatherByCity('Vancouver');\n    }\n  };\n\n  getWeatherByCity = async (propCity) => {\n    //if form value is not null\n\n    //current weather\n    const city = propCity;\n    const API_KEY = process.env.REACT_APP_OWM_API;\n    const CurrentURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\n\n    const apiCall = await fetch(CurrentURL);\n    if (apiCall.status !== 200) console.log('something wrong');\n\n    const response = await apiCall.json();\n    console.log(response);\n\n    this.setState({\n      temp: response.main.temp,\n      city: response.name,\n      humidity: response.main.humidity,\n      weather: response.weather[0].main,\n      description: response.weather[0].description,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <AppContext.Provider value={this.state}>\n          <WeatherCard getWeatherByCity={this.getWeatherByCity} />\n        </AppContext.Provider>\n        <div className=\"copy-right\">\n          Icons made by{' '}\n          <a\n            href=\"https://www.flaticon.com/authors/smashicons\"\n            title=\"Smashicons\">\n            Smashicons\n          </a>{' '}\n          from{' '}\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n            {' '}\n            www.flaticon.com\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Weather;\n","import React, { Component } from 'react';\n\nimport Weather from './weather/Wather';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}